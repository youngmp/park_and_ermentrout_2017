"""
generate movie of the effects of pinning and adaptation. side-by-side with centroid and full bump solution in heatmap form
"""

import matplotlib.pyplot as plt
import numpy as np
from sys import stdout

import twod





sin = np.sin
cos = np.cos
pi = np.pi
sqrt = np.sqrt
exp = np.exp



def plot_surface_movie(simdata,skip,movie=False,
                       file_prefix="mov/test",
                       file_suffix=".png",
                       title="",scene_number=1):
    """
    take fully computed surface solution and display the plot over time
    X: domain
    sol: full solution with u,z for all time
    TN: number of time steps
    skip: number of time steps to skip per plot display
    """
    TN = len(simdata.t)
    XX,YY = np.meshgrid(simdata.X,simdata.X,indexing='ij')
    
    #N = sol[0,0,:,0]
    lo = -3#lo = np.amin(np.reshape(sol[:,0,:,:],(TN*N*N)))
    hi = 5#hi = np.amax(np.reshape(sol[:,0,:,:],(TN*N*N)))


    #plt.ion()

    """
    ax.set_title('Solution u')
    ax2.set_title('Centroid')


    ax2.set_xticks(np.arange(-1,1+.5,.5)*pi)
    ax2.set_yticks(np.arange(-1,1+.5,.5)*pi)

    #ax.set_xticks(np.arange(-1,1+.5,.5)*pi)
    #ax.set_yticks(np.arange(-1,1+.5,.5)*pi)


    label = [r"$-\pi$", r"$-\frac{\pi}{2}$", r"$0$", r"$\frac{\pi}{2}$",   r"$\pi$"]
    ax2.set_xticklabels(label, fontsize=15)
    ax2.set_yticklabels(label, fontsize=15)

    #ax2.set_xticklabels(label, fontsize=15)
    #ax2.set_yticklabels(label, fontsize=15)

    plt.suptitle('g='+str(simdata.g)+'; q='+str(simdata.q))
    """

    total_iter = int(TN/skip)-1
    start_iter = (scene_number-1)*total_iter
    end_iter = (scene_number)*total_iter

    label = [r"$-\pi$", r"$-\frac{\pi}{2}$", r"$0$", r"$\frac{\pi}{2}$",   r"$\pi$"]

    for i in range(total_iter):
        
        k = i*skip
        if (i <= 20) or ( (i >= 30) and (i <= 40)):

            c1='red'
            bg1 = 'yellow'
        else:

            c1 = 'black'
            bg1 = 'white'

        fig = plt.figure(figsize=(7,3.2))
        ax = fig.add_subplot(121)
        ax2 = fig.add_subplot(122)
        
        #ax2.set_xlim(-pi,pi)
        #ax2.set_ylim(-pi,pi)


        plt.suptitle('g='+str(simdata.g)+'; q='+str(simdata.q),color=c1,backgroundcolor=bg1)
        #fig = plt.figure()
        
        #ax.set_title("u")



        ax.set_title('Solution u')
        ax2.set_title('Centroid')


        ax.matshow(simdata.u[k,::-1,:],extent=[-pi,pi,-pi,pi])
        a
        ax.xaxis.set_ticks_position('bottom')

        ax.set_xticks(np.arange(-1,1+.5,.5)*pi)
        ax.set_yticks(np.arange(-1,1+.5,.5)*pi)

        ax.set_xticklabels(label, fontsize=15)
        ax.set_yticklabels(label, fontsize=15)



        z = np.linspace(0,1,len(simdata.th1[:k])+len(simdata.th1[:k])/5)[len(simdata.th1[:k])/5:]
        color = plt.cm.Greys(z)



        ax2.scatter(simdata.th1[:k],simdata.th2[:k],color=color,s=20)

        ax2.set_xticks(np.arange(-1,1+.5,.5)*pi)
        ax2.set_yticks(np.arange(-1,1+.5,.5)*pi)

        ax2.set_xticklabels(label, fontsize=15)
        ax2.set_yticklabels(label, fontsize=15)

        ax.tick_params(axis='x', which='major', pad=10)
        ax2.tick_params(axis='x', which='major', pad=10)

        ax2.set_xlim(-pi,pi)
        ax2.set_ylim(-pi,pi)




        #ax.xaxis.set_ticks_position('none')
        #ax.yaxis.set_ticks_position('none')
        
        #fig.savefig(file_prefix+str(i)+file_suffix)
        #ax.text(0,0,11,"t="+str(t[k]))
        #ax.text(0,0,10,"g="+str(g)+", q="+str(q)+", eps="+str(eps))

        #plt.show()

        #plt.pause(.000000001)
        #plt.cla()

        j = start_iter+i

        fig.savefig(file_prefix+str(j)+file_suffix)
        plt.cla()
        plt.close()


        stdout.write("\r Simulation Recapping... %d%%" % int((100.*(k+1)/len(simdata.t))))
        stdout.flush()
    print



def main():

    ## scenes 1/2 with stationary bump and traveling bump (q=0, g=0 and g=3)
    zshift_angle=pi/5.;zshift_rad=.3
    
    print 'initial angle',zshift_angle,'inital rad',zshift_rad
    ushift1=0.;ushift2=0.
    zshift1=ushift1-zshift_rad*np.cos(zshift_angle);zshift2=ushift2-zshift_rad*np.sin(zshift_angle)
    ishift1=0.;ishift2=0.
    
    simdata = twod.SimDat(q=0.,g=3.,
                          ushift1=ushift1,
                          ushift2=ushift2,
                          zshift1=zshift1,
                          zshift2=zshift2,
                          ishift1=ishift1,
                          ishift2=ishift2,
                          pinning_function='ss',
                          initial_function='ss',
                          recompute_kernel=False,
                          recompute_I=True,
                          save_last=True,
                          use_last=False,
                          T=3000,eps=.01)

    skip = 100
    plot_surface_movie(simdata,skip,movie=False,scene_number=1)

    simdata = twod.SimDat(q=1.,g=3.,
                          pinning_function='ss',
                          initial_function='ss',
                          recompute_kernel=False,
                          recompute_I=True,
                          save_last=True,
                          use_last=True,
                          T=3000,eps=.01)

    plot_surface_movie(simdata,skip,movie=False,scene_number=2)


    simdata = twod.SimDat(q=1.,g=5.,
                          pinning_function='ss',
                          initial_function='ss',
                          recompute_kernel=False,
                          recompute_I=True,
                          save_last=True,
                          use_last=True,
                          T=3000,eps=.01)

    plot_surface_movie(simdata,skip,movie=False,scene_number=3)

    

if __name__ == "__main__":
    main()
